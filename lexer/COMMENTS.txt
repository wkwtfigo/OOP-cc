TOKEN categories:

1.Keywords

class, extends, is, end, var, method, this,
if, then, else, while, loop, return, true, false
print

// for reference of something declared
2. Identifiers

names of classes, parameters, variables
lexical rule: [A-Za-z_][A-Za-z0-0_]* (with check for a keyword)

3. Assignment operators

ASSIGN -> ":="
ARROW -> "=>" (short form)

4. Separators / Punctuation

DOT -> "."
COLON -> ":"
COMMA -> ","
LPAR -> "("
RPAR -> ")"
LBRACK -> "["
RBRACK -> "]"
LBRACE -> "{"
RBRACE -> "}"

not tokens
5. Comments

one line: // ...
multiple lines: /* ... */

6. Spaces / Tabulation / New lines

ignored

/*
we can add errors as tokens and as exceptions -- different implementations
or we can 2 types of errors -- two implementations for different types

lexer errors: 
1. Unknown character.
2. Invalid literal (number, boolean).
3. Unclosed constructs (comment, string).
4. Overflow.
5. Invalid escape characters.
6. Unexpected EOF.

parser errors:
1. syntax errors

AST errors:
1. semantic errors

also runtime errors
*/
7. Error

// values:
// var a : Integer(42) -- 42 is a literal (INT_LIT)
8. Literals

INT_LIT -> integers
REAL_LIT -> real numbers

// BOOL_LIT may be not declared as we have true/false as keywords
BOOL_LIT -> logical (true/false)

Printing Expression Rule:

Statement 
    : print Expression

class Hello is
    this() is
        var x : Integer(42)
        print x
    end
end

OR

class IO is
    method println(x: AnyValue)
end

class Hello is
    this() is
        var x : Integer(42)
        IO.println(x)
    end
end

